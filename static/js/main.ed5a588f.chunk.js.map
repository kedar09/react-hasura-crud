{"version":3,"sources":["services/User/user.service.js","components/Update-User/UpdateUser.js","components/User-List/UserList.js","pages/User-Page/UserPage.js","components/Add-User/AddUser.js","routes/Root-Route/RootRoute.js","App.js","reportWebVitals.js","index.js"],"names":["ADD_USER","gql","GET_USERS","UPDATE_USER","DELETE_USER","UpdateUser","props","useState","id","name","address","state","setState","useMutation","updateUser","history","useHistory","useEffect","location","handleChange","e","target","value","handleSubmit","a","variables","optimisticResponse","awaitRefetchQueries","refetchQueries","query","updateUserResult","console","log","swal","push","className","Card","Header","Body","Form","Group","controlId","Label","Control","type","disabled","onChange","placeholder","Button","variant","onClick","UserList","useQuery","loading","error","data","deleteUser","Spinner","animation","role","message","deleteUserData","update","cache","newTodos","readQuery","user","filter","t","writeQuery","deleteUserResult","UserDataList","map","size","color","pathname","Table","striped","bordered","hover","UserPage","AddUser","addUser","addUserResult","updateData","RootRoute","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed5a588f.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const ADD_USER = gql`\n  mutation($name: String!, $address: String!) {\n    insert_user(objects: { name: $name, address: $address }) {\n      affected_rows\n      returning {\n        id\n        name\n        address\n      }\n    }\n  }\n`;\n\nexport const GET_USERS = gql`\n  query {\n    user(order_by: { id: asc }) {\n      id\n      name\n      address\n    }\n  }\n`;\n\nexport const UPDATE_USER = gql`\n  mutation($id: Int!, $name: String!, $address: String!) {\n    update_user(\n      where: { id: { _eq: $id } }\n      _set: { name: $name, address: $address }\n    ) {\n      affected_rows\n      returning {\n        id\n        name\n        address\n      }\n    }\n  }\n`;\n\nexport const DELETE_USER = gql`\n  mutation($id: Int!) {\n    delete_user(where: { id: { _eq: $id } }) {\n      affected_rows\n    }\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { GET_USERS, UPDATE_USER } from \"../../services/User/user.service\";\nimport { Form, Button, Card } from \"react-bootstrap\";\nimport \"./update-user.css\";\nimport { useHistory } from \"react-router-dom\";\nimport swal from \"sweetalert\";\n\nconst UpdateUser = (props) => {\n  const [state, setState] = useState({ id: \"\", name: \"\", address: \"\" });\n  const [updateUser] = useMutation(UPDATE_USER);\n  const history = useHistory();\n\n  useEffect(() => {\n    setState({\n      ...state,\n      id: props.location.state.id,\n      name: props.location.state.name,\n      address: props.location.state.address,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleChange = (e) => {\n    setState({ ...state, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async () => {\n    try {\n      let updateUserResult = await updateUser({\n        variables: state,\n        optimisticResponse: true,\n        awaitRefetchQueries: true,\n        // update: (cache) => {\n        //     const existingUsers = cache.readQuery({query: getUsers});\n        //     const newTodos = existingUsers.user.map(t => {\n        //         if (t.id === state.id) {\n        //             return {...t, name: state.name, address: state.address };\n        //         } else {\n        //             return t;\n        //         }\n        //     });\n        //     cache.writeQuery({\n        //         query: getUsers,\n        //         data: {todos: newTodos}\n        //     });\n        // }\n        refetchQueries: [{ query: GET_USERS }],\n      });\n      console.log(updateUserResult);\n      swal(\"Successfully!\", \"User updated!\", \"success\");\n      history.push(\"/\");\n    } catch (e) {\n      console.log(e);\n      swal(\"Failed!\", \"Update user request failed!\", \"error\");\n    }\n  };\n\n  return (\n    <div className=\"updateUserDiv\">\n      <Card>\n        <Card.Header>Update User</Card.Header>\n        <Card.Body>\n          <Form className=\"updateUserForm\">\n            <Form.Group controlId=\"formBasicID\">\n              <Form.Label>ID</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"id\"\n                value={state.id}\n                disabled={true}\n                onChange={handleChange}\n                placeholder=\"Enter id\"\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formBasicName\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                value={state.name}\n                onChange={handleChange}\n                placeholder=\"Enter name\"\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicName\">\n              <Form.Label>Address</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"address\"\n                value={state.address}\n                onChange={handleChange}\n                placeholder=\"Enter address\"\n              />\n            </Form.Group>\n\n            <Button\n              variant=\"primary\"\n              className=\"updateUserSubmitButton\"\n              onClick={handleSubmit}\n            >\n              Update\n            </Button>\n\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                history.push(\"/\");\n              }}\n            >\n              Cancel\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default UpdateUser;\n","import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Table } from \"react-bootstrap\";\nimport { DELETE_USER, GET_USERS } from \"../../services/User/user.service\";\nimport { Pencil, Trash } from \"phosphor-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Spinner, Card } from \"react-bootstrap\";\nimport \"./user-list.css\";\nimport swal from \"sweetalert\";\n\nconst UserList = () => {\n  const { loading, error, data } = useQuery(GET_USERS, {\n    // fetchPolicy: \"cache-and-network\",\n    // ssr: true\n    // partialRefetch: true\n  });\n  //   const [getCurrentUser, { data, loading, error }] = useLazyQuery(getUsers, {fetchPolicy: \"cache-and-network\" });\n  const [deleteUser] = useMutation(DELETE_USER);\n  const history = useHistory();\n\n  //   let isMounted = true;\n  //   useEffect(() => {\n  //     if (isMounted) {\n  //       getCurrentUser();\n  //     }\n  //     return () => {\n  //       isMounted = false;\n  //     };\n  //   }, []);\n  if (loading)\n    return (\n      <Card className=\"cardSpinner\">\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      </Card>\n    );\n  if (error) return `Error! ${error.message}`;\n\n  const deleteUserData = async (id) => {\n    try {\n      let deleteUserResult = await deleteUser({\n        variables: { id: id },\n        optimisticResponse: true,\n        // awaitRefetchQueries: true,\n        // refetchQueries: [{ query: GET_USERS }],\n        update: (cache) => {\n          const existingTodos = cache.readQuery({ query: GET_USERS });\n          const newTodos = existingTodos.user.filter((t) => t.id !== id);\n          cache.writeQuery({\n            query: GET_USERS,\n            data: { user: newTodos },\n          });\n        },\n      });\n      console.log(deleteUserResult);\n      swal(\"Successfully!\", \"User deleted!\", \"success\");\n    } catch (e) {\n      console.log(e);\n      swal(\"Failed!\", \"Delete user request failed!\", \"error\");\n    }\n  };\n  const UserDataList = () => {\n    return data.user.map(({ id, name, address }) => (\n      <tbody key={id}>\n        <tr>\n          <td>{id}</td>\n          <td>{name}</td>\n          <td>{address}</td>\n          <td>\n            <Pencil\n              size={25}\n              color=\"#0066ff\"\n              onClick={() => {\n                history.push({\n                  pathname: \"/update-user\",\n                  state: { id: id, name: name, address: address },\n                });\n              }}\n            />\n          </td>\n          <td>\n            <Trash\n              size={25}\n              color=\"#0066ff\"\n              onClick={() => {\n                deleteUserData(id);\n              }}\n            />\n          </td>\n        </tr>\n      </tbody>\n    ));\n  };\n\n  return (\n    <div>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Address</th>\n            <th>Edit</th>\n            <th>Delete</th>\n          </tr>\n        </thead>\n        <UserDataList />\n      </Table>\n    </div>\n  );\n};\n\nexport default UserList;\n","import React from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport UserList from \"../../components/User-List/UserList\";\nimport \"./user-page.css\";\n\nconst UserPage = (props) => {\n  const history = useHistory();\n  return (\n    <div>\n      <Card>\n        <Card className=\"cardMargin\">\n          <UserList />\n        </Card>\n        <div className=\"cardMargin\">\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              history.push(\"/add-user\");\n            }}\n          >\n            Add New User\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default UserPage;\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { Form, Button, Card } from \"react-bootstrap\";\nimport \"./add-user.css\";\nimport { ADD_USER, GET_USERS } from \"../../services/User/user.service\";\nimport { useHistory } from \"react-router-dom\";\nimport swal from \"sweetalert\";\n\nconst AddUser = () => {\n  const history = useHistory();\n  const [state, setState] = useState({ name: \"\", address: \"\" });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleChange = (e) => {\n    setState({ ...state, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    try {\n      let addUserResult = await addUser({\n        variables: state,\n        optimisticResponse: true,\n        awaitRefetchQueries: true,\n        refetchQueries: [{ query: GET_USERS }],\n      });\n      console.log(addUserResult);\n      //   swal(\"\");\n      swal(\"Successfully!\", \"New user added!\", \"success\");\n      history.push(\"/\", { updateData: true });\n      // window.location.reload();\n    } catch (e) {\n      console.log(e);\n      swal(\"Failed!\", \"Add new user request failed!\", \"error\");\n    }\n  };\n\n  return (\n    <div className=\"divAddUser\">\n      <Card>\n        <Card.Header>Add New User</Card.Header>\n        <Card.Body>\n          <Form className=\"addUserForm\">\n            <Form.Group controlId=\"formBasicName\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                value={state.name}\n                onChange={handleChange}\n                placeholder=\"Enter name\"\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicName\">\n              <Form.Label>Address</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"address\"\n                value={state.address}\n                onChange={handleChange}\n                placeholder=\"Enter address\"\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" onClick={handleSubmit}>\n              Submit\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default AddUser;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport UpdateUser from \"../../components/Update-User/UpdateUser\";\nimport UserPage from \"../../pages/User-Page/UserPage\";\nimport AddUser from \"../../components/Add-User/AddUser\";\n\nconst RootRoute = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={UserPage}></Route>\n        <Route exact path=\"/add-user\" component={AddUser}></Route>\n        <Route exact path=\"/update-user\" component={UpdateUser}></Route>\n      </Switch>\n    </Router>\n  );\n};\nexport default RootRoute;\n","import RootRoute from './routes/Root-Route/RootRoute';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RootRoute />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst client = new ApolloClient({\n  uri: \"https://your-app-name/v1/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}